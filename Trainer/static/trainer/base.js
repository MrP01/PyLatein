// Generated by CoffeeScript 1.10.0
var AbstractController, AbstractInputWidget, AbstractResult, AbstractTrainer, SimpleController, SlidingNotifier,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AbstractResult = (function() {
  function AbstractResult() {}

  return AbstractResult;

})();

AbstractInputWidget = (function() {
  function AbstractInputWidget() {}

  AbstractInputWidget.prototype.setResult = function(result) {};

  AbstractInputWidget.prototype.getInput = function() {};

  AbstractInputWidget.prototype.clear = function() {};

  return AbstractInputWidget;

})();

AbstractTrainer = (function() {
  function AbstractTrainer() {}

  AbstractTrainer.prototype.getPrompt = function(voc) {};

  AbstractTrainer.prototype.getSolution = function(voc) {};

  AbstractTrainer.prototype.isCorrect = function(voc, result) {};

  return AbstractTrainer;

})();

SlidingNotifier = (function() {
  function SlidingNotifier(correct_id, wrong_id) {
    this.correct = $(correct_id);
    this.wrong = $(wrong_id);
  }

  SlidingNotifier.prototype.message = function(type, timeout) {
    var code, this_;
    this_ = this;
    if (type === "correct") {
      this.correct.slideDown(400);
      code = function() {
        return this_.correct.slideUp(500);
      };
    } else if (type === "wrong") {
      this.wrong.slideDown(400);
      code = function() {
        return this_.wrong.slideUp(500);
      };
    }
    if (timeout) {
      return setTimeout(code, timeout);
    }
  };

  SlidingNotifier.prototype.clearMessage = function() {
    this.correct.slideUp(500);
    return this.wrong.slideUp(500);
  };

  return SlidingNotifier;

})();

AbstractController = (function() {
  function AbstractController(trainer1, vocs1, input1, notifier1, promptId) {
    this.trainer = trainer1;
    this.vocs = vocs1;
    this.input = input1;
    this.notifier = notifier1;
    this.current_voc = null;
    this.current_voc_index = 0;
    this.wrong_count = 0;
    this.prompt = $(promptId);
  }

  AbstractController.prototype.check = function() {};

  AbstractController.prototype.next = function() {};

  AbstractController.prototype.start = function() {
    return this.next();
  };

  return AbstractController;

})();

SimpleController = (function(superClass) {
  extend(SimpleController, superClass);

  function SimpleController(trainer, vocs, input, notifier, promptId) {
    SimpleController.__super__.constructor.call(this, trainer, vocs, input, notifier, promptId);
    this.current_voc = null;
    this.next_voc_index = 0;
    this.wrong_count = 0;
  }

  SimpleController.prototype.check = function() {
    var code, this_;
    this_ = this;
    if (this.trainer.isCorrect(this.current_voc, this.input.getInput())) {
      this.notifier.message("correct", 1500);
      this.input.setResult(this.trainer.getSolution(this.current_voc));
      code = function() {
        return this_.next();
      };
      return setTimeout(code, 1500);
    } else {
      this.notifier.message("wrong", 2000);
      this.wrong_count += 1;
      this.input.clear();
      if (this.wrong_count >= 2) {
        this.input.setResult(this.trainer.getSolution(this.current_voc));
        code = function() {
          return this_.next();
        };
        return setTimeout(code, 2000);
      }
    }
  };

  SimpleController.prototype.next = function() {
    this.current_voc = this.vocs[this.next_voc_index];
    if (this.current_voc === void 0) {
      alert("Well done!");
      return;
    }
    this.next_voc_index += 1;
    this.prompt.html(this.trainer.getPrompt(this.current_voc));
    this.input.clear();
    return this.wrong_count = 0;
  };

  SimpleController.prototype.start = function() {
    this.next_voc_index = 0;
    return this.next();
  };

  return SimpleController;

})(AbstractController);

//# sourceMappingURL=base.js.map
